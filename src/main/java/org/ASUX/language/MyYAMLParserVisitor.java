/*
 BSD 3-Clause License
 
 Copyright (c) 2019, Udaybhaskar Sarma Seetamraju
 All rights reserved.
 
 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:
 
 * Redistributions of source code must retain the above copyright notice, this
 list of conditions and the following disclaimer.
 
 * Redistributions in binary form must reproduce the above copyright notice,
 this list of conditions and the following disclaimer in the documentation
 and/or other materials provided with the distribution.
 
 * Neither the name of the copyright holder nor the names of its
 contributors may be used to endorse or promote products derived from
 this software without specific prior written permission.
 
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.ASUX.language;

import java.util.regex.*;

import org.antlr.v4.runtime.*;      // https://www.antlr.org/api/Java/org/antlr/v4/runtime/package-summary.html
import org.antlr.v4.runtime.tree.*; 
import org.antlr.v4.runtime.misc.*; // https://www.antlr.org/api/Java/org/antlr/v4/runtime/UnbufferedCharStream.html

import static org.junit.Assert.*;

/**
 * The 'base' class generated by ANTLR has do-nothing methods.  This class overrides methods, to invoke logic when the appropriate YAML command is detected (fully).
 */
public class MyYAMLParserVisitor extends YAMLANTLR4ParserBaseVisitor<String> {

    private static final String HDR0 = MyYAMLParserVisitor.class.getName();
    public static final String CLASSNAME = HDR0;

    //==============================================================================
    //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    //==============================================================================

    // No default constructor needed - UNLESS .. in the future, I need to save information within instance-variables.

    //==============================================================================
    //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    //==============================================================================

    /** Overrides default behavior and just dumping tokens to STDOUT */
    @Override
    public String visitYaml_command( YAMLANTLR4Parser.Yaml_commandContext _context ) {
        final String HDR = HDR0 + ".visitYaml_command(): ";
        // visitChildren( _context );
        System.out.println( HDR + "ONE OF MANY VALID YAML Command detected: [" + _context.getText() + "]" );
        return super.visitYaml_command( _context );
    }

    //==============================================================================
    //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    //==============================================================================

    /** Overrides default behavior - by NOT returning the Tokens, and instead returning the actual-text! */
    @Override
    public String visitYaml_command_read( YAMLANTLR4Parser.Yaml_command_readContext _context ) {
        final String HDR = HDR0 + ".visitYaml_command_read(): ";
        // visitChildren( _context );
        System.out.println( HDR + "READ_YAML Command detected: [" + _context.getText() + "]" );
        return super.visitYaml_command_read( _context );
    }

    // /** Overrides default behavior - by NOT returning the Tokens, and instead returning the actual-text! */
    // @Override
    // public String visitYaml_command_read( YAMLANTLR4Parser.Yaml_commandContext _context ) {
    //     return _context.getText();
    // }

    //==============================================================================
    //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    //==============================================================================

    // /** prints all the text and ignores all the tags */
    // @Override
    // public String visitYaml_command( YAMLANTLR4Parser.Yaml_commandContext _context ) {
    //     System.out.print( _context.TEXT().getText() );
    //     return visitChildren( _context );
    // }

    //==============================================================================
    //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    //==============================================================================

    // /** We have overridden the default-implementation of visitElement() so that .. <br>
    //  * it prints the text of its child, but __ONLY IF__ it’s a top element, and NEVER inside a 'tag'.
    //  */
    // @Override
    // public String visitJsonelem( YAMLANTLR4Parser.JsonelemContext context )
    // {
    //     if(context.parent instanceof YAMLANTLR4Parser.JsonelemContext) // !!!!!!!!!!!!!!! whether parent is also a jsonElement... does this make any sense???????????
    //     {
    //         if(context.content() != null)
    //             System.out.print(visitContent(context.content()));
    //         if(context.tag() != null)
    //             System.out.print(visitTag(context.tag()));
    //     }
    //     return null;
    // }

    //==============================================================================
    //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    //==============================================================================

    // @Override
    // public String visitTag(MarkupParser.TagContext context)
    // {
    //     String text = "";
    //     String startDelimiter = "", endDelimiter = "";
    //     String id = context.ID(0).getText();
    //     switch(id)
    //     {
    //         case "b":
    //             startDelimiter = endDelimiter = "**";
    //         break;
    //         case "u":
    //             startDelimiter = endDelimiter = "*";
    //         break;
    //         case "quote":
    //             String attribute = context.attribute().STRING().getText();
    //             attribute = attribute.substring(1,attribute.length()-1);
    //             startDelimiter = System.lineSeparator() + "> ";
    //             endDelimiter = System.lineSeparator() + "> " + System.lineSeparator() + "> – "
    //                         + attribute + System.lineSeparator();
    //         break;
    //      } 
    //     text += startDelimiter;
    //     for (MarkupParser.ElementContext node: context.element())
    //     {
    //         if(node.tag() != null)
    //             text += visitTag(node.tag());
    //         if(node.content() != null)
    //             text += visitContent(node.content());
    //     }
    //     text += endDelimiter;
    //     return text;
    // }

    //==============================================================================
    //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    //==============================================================================

    //==============================================================================
    //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    //==============================================================================



    public static void main(String[] a) {
        // final String HDR = CLASSNAME + ".main(): ";
        // try {
        //     throw new Exception( "main() is NOT to be used for Testing purposes." );
        // } catch(Exception e) {
        //     e.printStackTrace( System.err );
        //     System.err.println( HDR + e.getMessage() );
        // }
    } // main()

}

//EOF
